// Code generated by MockGen. DO NOT EDIT.
// Source: booking_service_interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	models "github.com/tktanisha/booking_system/internal/models"
	payloads "github.com/tktanisha/booking_system/internal/utils/validators/payloads"
)

// MockBookingServiceInterface is a mock of BookingServiceInterface interface.
type MockBookingServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockBookingServiceInterfaceMockRecorder
}

// MockBookingServiceInterfaceMockRecorder is the mock recorder for MockBookingServiceInterface.
type MockBookingServiceInterfaceMockRecorder struct {
	mock *MockBookingServiceInterface
}

// NewMockBookingServiceInterface creates a new mock instance.
func NewMockBookingServiceInterface(ctrl *gomock.Controller) *MockBookingServiceInterface {
	mock := &MockBookingServiceInterface{ctrl: ctrl}
	mock.recorder = &MockBookingServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBookingServiceInterface) EXPECT() *MockBookingServiceInterfaceMockRecorder {
	return m.recorder
}

// CancelBooking mocks base method.
func (m *MockBookingServiceInterface) CancelBooking(arg0 uuid.UUID) (*models.Bookings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelBooking", arg0)
	ret0, _ := ret[0].(*models.Bookings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelBooking indicates an expected call of CancelBooking.
func (mr *MockBookingServiceInterfaceMockRecorder) CancelBooking(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelBooking", reflect.TypeOf((*MockBookingServiceInterface)(nil).CancelBooking), arg0)
}

// CheckoutBooking mocks base method.
func (m *MockBookingServiceInterface) CheckoutBooking(arg0 uuid.UUID) (*models.Bookings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckoutBooking", arg0)
	ret0, _ := ret[0].(*models.Bookings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckoutBooking indicates an expected call of CheckoutBooking.
func (mr *MockBookingServiceInterfaceMockRecorder) CheckoutBooking(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckoutBooking", reflect.TypeOf((*MockBookingServiceInterface)(nil).CheckoutBooking), arg0)
}

// CreateBooking mocks base method.
func (m *MockBookingServiceInterface) CreateBooking(arg0 *models.UserContext, arg1 *payloads.BookingPayload) (*models.Bookings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBooking", arg0, arg1)
	ret0, _ := ret[0].(*models.Bookings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBooking indicates an expected call of CreateBooking.
func (mr *MockBookingServiceInterfaceMockRecorder) CreateBooking(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBooking", reflect.TypeOf((*MockBookingServiceInterface)(nil).CreateBooking), arg0, arg1)
}
