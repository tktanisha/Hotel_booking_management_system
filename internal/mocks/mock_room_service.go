// Code generated by MockGen. DO NOT EDIT.
// Source: room_interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	payloads "github.com/tktanisha/booking_system/internal/api/validators/payloads"
	models "github.com/tktanisha/booking_system/internal/models"
)

// MockRoomServiceInterface is a mock of RoomServiceInterface interface.
type MockRoomServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRoomServiceInterfaceMockRecorder
}

// MockRoomServiceInterfaceMockRecorder is the mock recorder for MockRoomServiceInterface.
type MockRoomServiceInterfaceMockRecorder struct {
	mock *MockRoomServiceInterface
}

// NewMockRoomServiceInterface creates a new mock instance.
func NewMockRoomServiceInterface(ctrl *gomock.Controller) *MockRoomServiceInterface {
	mock := &MockRoomServiceInterface{ctrl: ctrl}
	mock.recorder = &MockRoomServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoomServiceInterface) EXPECT() *MockRoomServiceInterfaceMockRecorder {
	return m.recorder
}

// CreateRoom mocks base method.
func (m *MockRoomServiceInterface) CreateRoom(arg0 *payloads.CreateRoomPayload) (*models.Rooms, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRoom", arg0)
	ret0, _ := ret[0].(*models.Rooms)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRoom indicates an expected call of CreateRoom.
func (mr *MockRoomServiceInterfaceMockRecorder) CreateRoom(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRoom", reflect.TypeOf((*MockRoomServiceInterface)(nil).CreateRoom), arg0)
}

// GetAllRoomByHotelID mocks base method.
func (m *MockRoomServiceInterface) GetAllRoomByHotelID(hotelID uuid.UUID) ([]*models.Rooms, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllRoomByHotelID", hotelID)
	ret0, _ := ret[0].([]*models.Rooms)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllRoomByHotelID indicates an expected call of GetAllRoomByHotelID.
func (mr *MockRoomServiceInterfaceMockRecorder) GetAllRoomByHotelID(hotelID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllRoomByHotelID", reflect.TypeOf((*MockRoomServiceInterface)(nil).GetAllRoomByHotelID), hotelID)
}

// IncreaseRoomQuantity mocks base method.
func (m *MockRoomServiceInterface) IncreaseRoomQuantity(arg0 *payloads.RoomPayload, arg1 uuid.UUID) (*models.Rooms, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncreaseRoomQuantity", arg0, arg1)
	ret0, _ := ret[0].(*models.Rooms)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IncreaseRoomQuantity indicates an expected call of IncreaseRoomQuantity.
func (mr *MockRoomServiceInterfaceMockRecorder) IncreaseRoomQuantity(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncreaseRoomQuantity", reflect.TypeOf((*MockRoomServiceInterface)(nil).IncreaseRoomQuantity), arg0, arg1)
}

// IsAvailable mocks base method.
func (m *MockRoomServiceInterface) IsAvailable(arg0 *payloads.RoomPayload, arg1 uuid.UUID) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAvailable", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsAvailable indicates an expected call of IsAvailable.
func (mr *MockRoomServiceInterfaceMockRecorder) IsAvailable(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAvailable", reflect.TypeOf((*MockRoomServiceInterface)(nil).IsAvailable), arg0, arg1)
}

// ReduceRoomQuantity mocks base method.
func (m *MockRoomServiceInterface) ReduceRoomQuantity(arg0 *payloads.RoomPayload, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReduceRoomQuantity", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReduceRoomQuantity indicates an expected call of ReduceRoomQuantity.
func (mr *MockRoomServiceInterfaceMockRecorder) ReduceRoomQuantity(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReduceRoomQuantity", reflect.TypeOf((*MockRoomServiceInterface)(nil).ReduceRoomQuantity), arg0, arg1)
}
