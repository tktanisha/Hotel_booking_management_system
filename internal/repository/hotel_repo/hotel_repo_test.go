package hotel_repo

import (
	"database/sql"
	"errors"
	"regexp"
	"testing"
	"time"

	"github.com/DATA-DOG/go-sqlmock"
	"github.com/google/uuid"
	"github.com/tktanisha/booking_system/internal/models"
)

// TestHotelRepository_GetHotelByID tests the GetHotelByID method of HotelRepository.
func TestHotelRepository_GetHotelByID(t *testing.T) {
	tests := []struct {
		name          string
		hotelID       uuid.UUID
		mockBehavior  func(mock sqlmock.Sqlmock, id uuid.UUID)
		expectedError error
	}{
		{
			name:    "Success - Hotel Found",
			hotelID: uuid.New(),
			mockBehavior: func(mock sqlmock.Sqlmock, id uuid.UUID) {
				rows := sqlmock.NewRows([]string{
					"id", "manager_id", "name", "address", "created_at",
				}).AddRow(id, uuid.New(), "Hotel ABC", "123 Street", time.Now())
				mock.ExpectQuery(regexp.QuoteMeta(`
					SELECT id, manager_id, name, address, created_at
					FROM hotels
					WHERE id = $1
				`)).WithArgs(id).WillReturnRows(rows)
			},
			expectedError: nil,
		},
		{
			name:    "Failure - No Rows Found",
			hotelID: uuid.New(),
			mockBehavior: func(mock sqlmock.Sqlmock, id uuid.UUID) {
				mock.ExpectQuery(regexp.QuoteMeta(`
					SELECT id, manager_id, name, address, created_at
					FROM hotels
					WHERE id = $1
				`)).WithArgs(id).WillReturnError(sql.ErrNoRows)
			},
			expectedError: errors.New("hotel not found"),
		},
		{
			name:    "Failure - Query Error",
			hotelID: uuid.New(),
			mockBehavior: func(mock sqlmock.Sqlmock, id uuid.UUID) {
				mock.ExpectQuery(regexp.QuoteMeta(`
					SELECT id, manager_id, name, address, created_at
					FROM hotels
					WHERE id = $1
				`)).WithArgs(id).WillReturnError(errors.New("query failed"))
			},
			expectedError: errors.New("query failed"),
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			db, mock, err := sqlmock.New()
			if err != nil {
				t.Fatalf("error opening mock db: %s", err)
			}
			defer db.Close()

			tt.mockBehavior(mock, tt.hotelID)

			repo := NewHotelRepo(db)
			result, err := repo.GetHotelByID(tt.hotelID)

			if tt.expectedError != nil {
				if err == nil || err.Error() != tt.expectedError.Error() {
					t.Errorf("expected error: %v, got: %v", tt.expectedError, err)
				}
				if result != nil {
					t.Errorf("expected nil result, got: %+v", result)
				}
			} else {
				if err != nil {
					t.Errorf("unexpected error: %v", err)
				}
				if result == nil {
					t.Errorf("expected hotel, got nil")
				}
			}

			if err := mock.ExpectationsWereMet(); err != nil {
				t.Errorf("unmet expectations: %v", err)
			}
		})
	}
}

// TestHotelRepository_CreateHotel tests the CreateHotel method of HotelRepository.
func TestHotelRepository_CreateHotel(t *testing.T) {
	tests := []struct {
		name          string
		hotel         *models.Hotels
		mockBehavior  func(mock sqlmock.Sqlmock, hotel *models.Hotels)
		expectedError error
	}{
		{
			name: "Success - Create Hotel with Predefined ID & CreatedAt",
			hotel: &models.Hotels{
				Id:        uuid.New(),
				ManagerId: uuid.New(),
				Name:      "Grand Plaza",
				Address:   "456 Avenue",
				CreatedAt: time.Now(),
			},
			mockBehavior: func(mock sqlmock.Sqlmock, hotel *models.Hotels) {
				rows := sqlmock.NewRows([]string{"id"}).AddRow(hotel.Id)
				mock.ExpectQuery(regexp.QuoteMeta(`
					INSERT INTO hotels (id, manager_id, name, address, created_at)
					VALUES ($1, $2, $3, $4, $5)
					RETURNING id;
				`)).
					WithArgs(hotel.Id, hotel.ManagerId, hotel.Name, hotel.Address, hotel.CreatedAt).
					WillReturnRows(rows)
			},
			expectedError: nil,
		},
		{
			name: "Success - Create Hotel with Auto-generated ID & CreatedAt",
			hotel: &models.Hotels{
				// Assuming hotel.Id is Nil & CreatedAt is zero => should be set automatically
				ManagerId: uuid.New(),
				Name:      "Sunset Resort",
				Address:   "Beach Road",
			},
			mockBehavior: func(mock sqlmock.Sqlmock, hotel *models.Hotels) {
				// We expect the ID to be generated by the repo (uuid.New())
				mock.ExpectQuery(regexp.QuoteMeta(`
					INSERT INTO hotels (id, manager_id, name, address, created_at)
					VALUES ($1, $2, $3, $4, $5)
					RETURNING id;
				`)).
					WithArgs(sqlmock.AnyArg(), hotel.ManagerId, hotel.Name, hotel.Address, sqlmock.AnyArg()).
					WillReturnRows(sqlmock.NewRows([]string{"id"}).AddRow(uuid.New()))
			},
			expectedError: nil,
		},
		{
			name: "Failure - Insert Error",
			hotel: &models.Hotels{
				Id:        uuid.New(),
				ManagerId: uuid.New(),
				Name:      "Failed Hotel",
				Address:   "Nowhere",
				CreatedAt: time.Now(),
			},
			mockBehavior: func(mock sqlmock.Sqlmock, hotel *models.Hotels) {
				mock.ExpectQuery(regexp.QuoteMeta(`
					INSERT INTO hotels (id, manager_id, name, address, created_at)
					VALUES ($1, $2, $3, $4, $5)
					RETURNING id;
				`)).
					WithArgs(hotel.Id, hotel.ManagerId, hotel.Name, hotel.Address, hotel.CreatedAt).
					WillReturnError(errors.New("insert failed"))
			},
			expectedError: errors.New("insert failed"),
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			db, mock, err := sqlmock.New()
			if err != nil {
				t.Fatalf("error opening mock db: %s", err)
			}
			defer db.Close()

			tt.mockBehavior(mock, tt.hotel)

			repo := NewHotelRepo(db)
			result, err := repo.CreateHotel(tt.hotel)

			if tt.expectedError != nil {
				if err == nil || err.Error() != tt.expectedError.Error() {
					t.Errorf("expected error: %v, got: %v", tt.expectedError, err)
				}
				if result != nil {
					t.Errorf("expected nil result, got: %+v", result)
				}
			} else {
				if err != nil {
					t.Errorf("unexpected error: %v", err)
				}
				if result == nil {
					t.Errorf("expected hotel, got nil")
				}
			}

			if err := mock.ExpectationsWereMet(); err != nil {
				t.Errorf("unmet expectations: %v", err)
			}
		})
	}
}
